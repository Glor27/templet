/*--------------------------------------------------------------------------*/
/*  Copyright 2020 Sergei Vostokin                                          */
/*                                                                          */
/*  Licensed under the Apache License, Version 2.0 (the "License");         */
/*  you may not use this file except in compliance with the License.        */
/*  You may obtain a copy of the License at                                 */
/*                                                                          */
/*  http://www.apache.org/licenses/LICENSE-2.0                              */
/*                                                                          */
/*  Unless required by applicable law or agreed to in writing, software     */
/*  distributed under the License is distributed on an "AS IS" BASIS,       */
/*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/*  See the License for the specific language governing permissions and     */
/*  limitations under the License.                                          */
/*--------------------------------------------------------------------------*/

/////////////// Templet programming model semantics /////////////////////////

actor's variables   -- active[a] in {true,false} for any program state
                       message[a] in set(Messsages) for any program state

message's variables -- mobile[m] in {true,false} for any program state
                       actor[m]  in set(Actors) for any program state
.............................................................................

procedure ActorModel
|  { init() | send(_,_) | bind(_,_) }
|  for( m : mobile[m]=true ) parallel 
|  |    local a := actor[m]
|  |    message[a] := m
|  |    mobile[m] := false
|  |    active[a] := true
|  |    { next(m,a) | send(_,_)  | access(_,a) }
|  |    active[a] := false
|  end for
end ActorModel

procedure send(m,a) atomic
|  actor[m]  := a
|  mobile[m] := true  
end send

procedure bind(m,a) atomic
|  actor[m]  := a
|  mobile[m] := false  
end send

function access(m,a) atomic
|  access := ( mobile[m] = false /\ actor[m] = a )  
end access
.............................................................................