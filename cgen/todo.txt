Plans for future releases:
-- Implementing a DSL for the actor-task model in C ++;
-- Determining the boundaries of an implicit markup; 
-- New tools:
				~/lang/tools/rskel  -- restoring the templet markup using a template file;
				~/lang/tools/macta  -- new meta-processor for the actor-task model;
				~/lang/mactam.hpp   -- DSL for the actor-task model in C++.
				
//  in the mactam.hpp to define
class meta_actor{
public:
	 meta_actor& start();
	 meta_actor& in(const char* port_name,const char* message_type);
	 meta_actor& out(const char* port_name,const char* message_type);
	 meta_actor& task(const char* task_name,const char* task_engine_type,const char* task_type);
	 meta_actor& task(const char* task_name,const char* task_engine_type);
	 //for one task request object & many inbound tasks objects
	 //meta_actor& todo(const char* task_name,const char* task_engine_type,const char* task_type);
	 //meta_actor& todo(const char* task_name,const char* task_engine_type);
};
class meta_engine{
public:
	meta_actor& actor(const char* name);
private:
	void print_temlate(ostream&);
	void print_template_with_acta_dsl(ostream&);
};
//  usage in the code
void meta(meta_engine&e){
	e.actor("A").start().in("in","M").out("out","M").task("tsk","everest","mytask");
}

-----------rskel.exe---------
    ___
   |_>_|   The Temlet Project SDK (http://templet.ssau.ru)
   |_>_|   Utility for restoring a markup by the given template v.0.9.0
  TEMPLET  Copyright 2016-202?, Sergei Vostokin, ?
  
 Usage:  rskel {options}
 
 Options:
 -h -H -- print this screen (it also printed if no options or uncorrect options are set)
 -i -I <file> -- input file
 -o -O <file> -- output file
 -s -S <file> -- template file

-----------macta.exe---------
    ___
   |_>_|   The Temlet Project SDK (http://templet.ssau.ru)
   |_>_|   Meta-processor for the actor-task model in C ++ v.0.9.0
  TEMPLET  Copyright 2016-202?, Sergei Vostokin, ?
  
 Usage:  macta file [template-file]
  
 
-----------templet.exe-------- 
    ___
   |_>_|   The Temlet Project SDK (http://templet.ssau.ru)
   |_>_|   Processor for applying templates to code v.0.9.0
  TEMPLET  Copyright 2016-202?, Sergei Vostokin, ?
  
 Usage:  templet {options} <template-file> 
 
 Input/output options:
 ---------------------
 -i | -I <file> -- input (substitution source), default is stdin
 -o | -O <file> -- output (substitution result), default is stdout
 -m | -M <file> -- result of the substitution to template ovewrites the input file
 -x | -X        -- empty input is used 
 
 Mode options:
 -------------
 -d | -D -- detecting the block boundaries in input (by default the boundaries are marked-up)
 -r | -R -- output the rest of the source (that was not used in substitution),
            if no rest of input detected error code = 4 is raised 
 
 Filtering options:
 ------------------
 -f | -F regexpr -- output only blocks that fit the regular expression
 -c | -C mark | inner | outer | all -- clear markup, or inner,
                                  or outer, or all parts of blocks in the output
 Block signature options:
 ------------------------
 -s | -S <coded block signature> -- block signature for source and template files
 -t | -T <coded block signature> -- block signature for target (output) file
 
 Default signature for the beginning of the block is /*$TET$--blockID--*/ ,
                      and the ending of the block is /*$TET$*/  .
 The signature is coded as -/*$TET$-*/-/*$TET$*/, where random simbol '-' 
                      stands for the delimeter 
  
 Error codes:
 ------------
 0 -- success
 1 -- bad parameters, see the stderr for details
 2 -- cannot read from input file(s), see the stderr for details
 3 -- cannot write to output file, see the stderr for details
 4 -- processing error occures, see the stderr for details
 
 Examples:
 ---------
 templet                  -- print this screen
 templet code.cpp -X-Call -- checking consistancy of code with integrated mark-up
 templet -i code.cpp template.txt -c all
                          -- checking consistancy of code with separet mark-up
 templet -d -i code.cpp template.txt -o marked-up-code.cpp
                          -- detecting mark-up in code.cpp using template.txt
 templet -d -r -i code.cpp template.txt -o rest-of-code.cpp
                          -- detecting if code.cpp has a tait which does not fit template.txt
 cat marked-up-code.cpp | template template.txt -o new-marked-up-code.cpp
                          -- using template.txt to transform marked-up-code.cpp to new-marked-up-code.cpp
 template -r -i code.cpp template.txt -o rest-of-code.cpp
                          -- detecting if marked-up code.cpp has a tait which does not fit template.txt
                             and putting it to rest-of-code.cpp
 templet -i file.cpp template.txt -o file1.cpp -T -/*$tet$-*/-/*$tet$*/
                          -- place blocks from 'file.cpp' to the content of template 'template.txt' and
                             write the result to 'file1.cpp', use lowcase markup format
 templet -i file.cpp -D template.txt
                          -- restore block markup for the 'file.cpp' using template.txt,
                             show the result on the screen
 templet -D -m file.cpp template.txt 
                          -- restore block markup for the 'file.cpp' using template.txt,
                             overwrite the existing 'file.txt' with the resulting marked-up content
 templet -x -c mark file.cpp -o file1.cpp
                          -- clear the markup in 'file.cpp', put resut to 'file1.cpp' 
 echo | templet -f actor* -C outer file.cpp
                          -- show all blocks from 'file.cpp' with name(key) started with 'actor'
 templet -X -T -/*$tet$-*/-/*$tet$*/ file.cpp -O file.cpp
                          -- replacing the standard markup in 'file.cpp' with its lowcase variant
 